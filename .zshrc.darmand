# Compilation from source:
# ./configure --prefix=$HOME/env
# make
# make install

if [[ -f "/etc/SuSE-release" ]]; then
    SUSE_VERSION=$( grep -a VERSION /etc/SuSE-release | cut -d " " -f 3)
fi
EXPECTED_USER="darmand"

# Path to your oh-my-zsh configuration.
ZSH=$HOME/.oh-my-zsh

# Set name of the theme to load.
# Look in ~/.oh-my-zsh/themes/
# Optionally, if you set this to "random", it'll load a random theme each
# time that oh-my-zsh is loaded.
ZSH_THEME="davide"
#ZSH_THEME="agnoster"

# Set to this to use case-sensitive completion
# CASE_SENSITIVE="true"

# Comment this out to disable bi-weekly auto-update checks
 DISABLE_AUTO_UPDATE="true"

# Uncomment to change how many often would you like to wait before auto-updates occur? (in days)
# export UPDATE_ZSH_DAYS=13

# Uncomment following line if you want to disable colors in ls
# DISABLE_LS_COLORS="true"

# Uncomment following line if you want to disable autosetting terminal title.
 DISABLE_AUTO_TITLE="true"

# Uncomment following line if you want red dots to be displayed while waiting for completion
 COMPLETION_WAITING_DOTS="true"

# Which plugins would you like to load? (plugins can be found in ~/.oh-my-zsh/plugins/*)
# Custom plugins may be added to ~/.oh-my-zsh/custom/plugins/
# Example format: plugins=(rails git textmate ruby lighthouse)
plugins=()

echo "Sourcing oh-my-zsh ..."
source $ZSH/oh-my-zsh.sh
echo "Done!"

#source $ZSH/plugins/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh

# Customize to your needs...

autoload -Uz compinit && compinit
autoload colors
colors

#export PS1="$(print '%{\e[0;36m%}%n%{\e[0;37m%}@%{\e[0;36m%}%m%{\e[0m%}'):$(print '%{\e[0;33m%}%~%{\e[0m%}')$ "

#case $TERM in
#    termite|*xterm*|rxvt|rxvt-unicode|rxvt-256color|rxvt-unicode-256color|(dt|k|E)term)
#    precmd () { print -Pn "\e]0;[%n@%M][%~]%#\a" } 
#    preexec () { print -Pn "\e]0;[%n@%M][%~]%# ($1)\a" }
#  ;;
#    screen|screen-256color)
#      precmd () { 
#      print -Pn "\e]83;title \"$1\"\a" 
#      print -Pn "\e]0;$TERM - (%L) [%n@%M]%# [%~]\a" 
#    }
#    preexec () { 
#      print -Pn "\e]83;title \"$1\"\a" 
#      print -Pn "\e]0;$TERM - (%L) [%n@%M]%# [%~] ($1)\a" 
#    }
#  ;; 
#esac

export PATH=$PATH:$HOME/doc/scripts
export PATH=$PATH:$HOME/curl/usr/local/bin
export PATH=$PATH:$HOME/tools/TTServer
export PATH=$PATH:/projects/ngi/bin
export PATH=$PATH:/softntools/opt/devsup/platinum
export PATH=$PATH:$BIN

if [[ -f "/etc/SuSE-release" ]]; then
    if [[ "$SUSE_VERSION" == "10" ]]; then
        ENV_DIR=$HOME/env_SUSE10
        # For libevent-1.4.so.2 :
        export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/data3/ngi/soft/tools/onCall/memcached/lib
    elif [[ "$SUSE_VERSION" == "11" ]]; then
        ENV_DIR=$HOME/env_SUSE11
    else
        ENV_DIR=/usr
        echo "Unknown SUSE version!"
    fi
fi

export PATH=$ENV_DIR/bin:$PATH
export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$ENV_DIR/lib
export SHELL=$ENV_DIR/bin/zsh

#export PATH=$HOME/.cw/def:$PATH

export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/usr/lib64/engines/
export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$HOME/ama/obe/REG/ape/cfg/pack/MDW/lib/
export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$HOME/ama/obe/REG/ape/cfg/pack/OSP/lib/

export PYTHON_LIBRARY=/softntools/opt/Python-2.7/lib
export PYTHON_INCLUDE_DIR=/softntools/opt/Python-2.7/include/python2.7
export PYTHON_EXECUTABLE=/softntools/opt/Python-2.7/bin/python

export PKG_CONFIG_PATH=$PKG_CONFIG_PATH:$HOME/env/lib/pkgconfig

# From Nordyne:
#export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/opt/gcc-4.3.2/lib64:/opt/gcc/lib64:/opt/python-2.6-64/lib:/opt/gcc-4.3.2/lib64:/nastools/oracle/products/11.2.0.2/lib:/data3/ngi/soft/lib64:/nastools/oracle/products/11.2.0.2/lib:/nastools/oracle/products/9.2.0.8/lib:/remote/users2/darmand/env/lib:/usr/lib64/engines/

export ECLIPSE_HOME="/gcmtmp/${EXPECTED_USER}"

export HISTFILE=~/.zsh_history
export HISTSIZE=100000
export SAVEHIST=100000
# Add comamnds as they are typed, don't wait until shell exit
setopt inc_append_history
# When searching history don't display results already cycled through twice
setopt hist_find_no_dups
# don't execute, just expand history
setopt hist_verify
setopt share_history
setopt append_history
setopt extended_history
# Allow completion from within a word/phrase
setopt complete_in_word

# perform implicit tees or cats when multiple redirections are attempted
setopt multios

# CTAGS Sorting in VIM/Emacs is better behaved with this in place
export LC_COLLATE=C


# Set locale
export LANG=en_US.utf8
export LC_ALL=en_US.utf8
export LANG=en_US.utf8
export LANGUAGE=en_US.utf8

# consider words bash-style
autoload -U select-word-style
select-word-style bash

setopt dotglob

# allow approximate
zstyle ':completion:*' completer _complete _match _approximate
zstyle ':completion:*:match:*' original only
# offer indexes before parameters in subscripts
#zstyle ':completion:*:*:-subscript-:*' tag-order indexes parameters




######################
##### new
 # match uppercase from lowercase
zstyle ':completion:*' matcher-list 'm:{a-z}={A-Z}'

# offer indexes before parameters in subscripts
zstyle ':completion:*:*:-subscript-:*' tag-order indexes parameters

# formatting and messages
zstyle ':completion:*' verbose yes
zstyle ':completion:*:descriptions' format '%B%d%b'
zstyle ':completion:*:messages' format '%d'
zstyle ':completion:*:warnings' format 'No matches for: %d'
zstyle ':completion:*:corrections' format '%B%d (errors: %e)%b'
zstyle ':completion:*' group-name ''

# ignore completion functions (until the _ignored completer)
zstyle ':completion:*:functions' ignored-patterns '_*'
zstyle ':completion:*:scp:*' tag-order files users 'hosts:-host hosts:-domain:domain hosts:-ipaddr"IP\ Address *'
zstyle ':completion:*:scp:*' group-order files all-files users hosts-domain hosts-host hosts-ipaddr
zstyle ':completion:*:ssh:*' tag-order users 'hosts:-host hosts:-domain:domain hosts:-ipaddr"IP\ Address *'
zstyle ':completion:*:ssh:*' group-order hosts-domain hosts-host users hosts-ipaddr
zstyle '*' single-ignored show

##### new
######################

# 10ms for key sequences
KEYTIMEOUT=-1

# tab completion for PID :D
zstyle ':completion:*:*:kill:*' menu yes select
zstyle ':completion:*:kill:*' force-list always

bindkey   '^[[5~'   up-line-or-history
bindkey   '^[[6~'   down-line-or-history
bindkey   '^[[A'    up-line-or-search
bindkey   '^[[B'    down-line-or-search
bindkey   -M   vicmd   '	'       yank-pop
bindkey   -M   vicmd   '[3~'   vi-delete-char
bindkey   -M   vicmd   '^r'      redo
bindkey   -M   vicmd   'p'       yank
bindkey   -M   vicmd   'u'       undo
bindkey   -M   vicmd   ''      vi-backward-delete-char
bindkey   -M   vicmd   ''      vi-backward-delete-char      # for urxvt
bindkey   -M   viins   '[3~'   vi-delete-char
bindkey   -M   viins   '^r'      history-incremental-search-backward
bindkey   -M   viins   ''      vi-backward-delete-char
bindkey   -M   viins   ''      vi-backward-delete-char

# Tab complete for startAPE.sh , restartBEs.sh, ...
_otf_complete() {
    local word completions
    word="$1"
    completions="$(view_as_state.sh | grep NODE_APE | cut -d "|" -f 1 | tr -d ' ' | grep -i "${word}")"
    reply=( "${(ps:\n:)completions}" )
}

compctl -K _otf_complete startAPE.sh
compctl -K _otf_complete restartBEs.sh

# Report CPU usage for commands running longer than 10 seconds
REPORTTIME=10

OS_NAME=$(uname)

export PAGER=less

if [[ "$USER" == "${EXPECTED_USER}" ]]; then
  export DISPLAY=NCEL2404.iis.amadeus.net:0.0
  #export DISPLAY=172.16.253.79:0.0
else
  export DISPLAY=:0.0
fi

# Update the $DISPLAY to the IP from which the ssh connection was done.
# Useful when the IP of the machine where the X Server is running changes.
# Also check: http://brainscraps.wikia.com/wiki/Extreme_Multitasking_with_tmux_and_PuTTY
function update_display() {
  echo "Old \$DISPLAY=\n$DISPLAY"
  echo
  export DISPLAY=$(echo $SSH_CLIENT | cut -d" " -f1):0.0
  echo "New \$DISPLAY=\n$DISPLAY"
  echo
}


export PAGER=less

alias df='nocorrect df'
alias mv='nocorrect mv'
alias tmux='nocorrect tmux -2 -u -S $HOME/tmux/socket'
alias cp='nocorrect cp'
alias mkdir='nocorrect mkdir'
alias cvs='nocorrect cvs -w -q'
alias la='ls -a'
alias ll='ls -lh --color=always'
alias grep='grep --exclude "*.os"'
alias adminc='nocorrect adminc'
alias view_as_state='~/doc/scripts/view_as_state.sh'

if [[ "$USER" == "${EXPECTED_USER}" ]]
then
  #alias vim='nocorrect $HOME/env/bin/vim -u ~/.vim/.vimrc'
  alias vim='nocorrect vim -u ~/.vim/.vimrc'
  alias v='vim'
  alias vimdiff='nocorrect vim -c "windo set wrap" -d'
  alias gvim='nocorrect gvim'
else
  alias vim='nocorrect vim'
  alias v='nocorrect vim'
  alias vimdiff='nocorrect vim -c "windo set wrap" -d'
  alias gvim='nocorrect gvim'
fi

alias view='vim -R'
alias vr='vim -R'
alias svim='nocorrect svim'
alias sv='sudo vim -u ~/.vim/.vimrc'
alias vg='gvim'
alias vc='vim -c ":SessionOpen _LAST_SESSION_"'
alias g='~/doc/scripts/g'
alias gl='~/doc/scripts/gl'
alias gv='~/doc/scripts/gv'
alias dv='~/doc/scripts/cvs_diff_to_vim.sh'
alias vd='~/doc/scripts/vimdiff_input_file.zsh'
alias vdc='~/doc/scripts/vimdiff_modified_files.sh'
alias vod='~/doc/scripts/open_modified_files.zsh'
alias voc='~/doc/scripts/open_conflicting_files.sh'
alias vd2='~/doc/scripts/vimdiff_between_to_dir.sh'

export EDITOR="vim -u ~/.vim/.vimrc"
export CSCOPE_DB=""
# export CSCOPE_DB=/remote/users2/${EXPECTED_USER}/doc/cscope.out


alias cdr='cd ~/regression'
alias cdreg='cd ~/regression'

alias cdt='cd /gctmp/${EXPECTED_USER}/'

cdToPkgSrc() {
    cd ~/ngi_1/src/$1
}

alias cdaah='cd ~/ngi_1/src/aah'
alias cdaam='cd ~/ngi_1/src/aam'
alias cdacb='cd ~/ngi_1/src/acb'
alias cdace='cd ~/ngi_1/src/ace'
alias cdacm='cd ~/ngi_1/src/acm'
alias cdacp='cd ~/ngi_1/src/acp'
alias cdags='cd ~/ngi_1/src/ags'
alias cdagw='cd ~/ngi_1/src/agw'
alias cdbcg='cd ~/ngi_1/src/bcg'
alias cdbrc='cd ~/ngi_1/src/brc'
alias cdodc='cd ~/ngi_1/src/odc'
alias cdegh='cd ~/ngi_1/src/egh'
alias cdfsp='cd ~/ngi_1/src/fsp'
alias cdfvp='cd ~/ngi_1/src/fvp'
alias cdcom='cd ~/ngi_1/src/com'
alias cdneg='cd ~/ngi_1/src/neg'
alias cdgdm='cd ~/ngi_1/gdmpacks'
alias cddb='cd ~/ngi_1/dbschema'
alias cde='cd ~/ngi_1/etc'
alias cds='cd ~/ngi_1/src'
alias cdn='cd ~/ngi_1'

alias ctags='$HOME/ctags_5.7/ctags-5.7/ctags'

alias cvscool='$HOME/doc/scripts/cvscool'

set background=light

unset ENABLE_JOBMANAGER;
unset BM_ACCOUNT;

ulimit -c unlimited 

# Disable <C-S> key, which freezes the terminal (you can use <C-Q> to unfreez>)
stty -ixon

export CVSREAD=0

# export PAGER="vim -"
# export MANPAGER="vim -c '%!col -b' -c 'set ft=man nomod nolist' -c 'set nomodifiable' -"

alias apeConnect='$HOME/tools/shell/apeConnect'

gotToDirOrSsh() {
    if [ $# -gt 1 ]; then
        CMD="ssh -l $1 -t ncegcolnx217 'cd ~/$2; exec /bin/zsh;'"
        echo
        echo $CMD
        echo
        echo "Useful path:"
        echo " /gctmp/$1/log/Start.log"
        echo " /gctmp/$1/log/Stop.log"
        echo
        eval "$CMD"
    else
        cd $HOME/$1
    fi
}
golog() {
    gotToDirOrSsh $1 ama/obe/REG/ape/com/log
}
gocore() {
    gotToDirOrSsh $1 ama/obe/SLS
}
goabr() {
    gotToDirOrSsh $1 ama/obe/REG/ape/com/data/abr
}

alias start_otf='nocorrect start_otf'
alias scons="scons appname=APE custom_builddir=/gctmp/$USERNAME/obj obedelpath=/gctmp/$USERNAME/obetar"

# HG
# Breaks the nominate command!!!!!
#alias hg='hg -v'
# Consider all files (e.g. Description.xml) in hg commands:
alias hg='hg '
alias st='st --no-exclude'
alias status='status --no-exclude'
alias ci='ci --no-exclude'
alias commit='commit --no-exclude'
alias di='di --no-exclude'
alias diff='diff --no-exclude'

###########################################
# tmux stuff

alias r="printf '\033k'$(basename $(pwd))'\033\\'"

# 2011-10-19: tmux shortcut for creating/attaching named sessions
t() {
  [[ -z "$1" ]] && { echo "usage: t <session>" >&2; return 1; }
  printf '\033]0;%s\007' $1
  killall -10 tmux -u darmand
  tmux has -t $1 && tmux attach -t $1 || tmux new -s $1
}

if [[ "$USER" != "apeoncal" ]]; then
  # 2011-10-19
  # stolen from completion function _tmux
  function __tmux-sessions() {
  local expl
  local -a sessions
    sessions=( ${${(f)"$(command tmux -S $HOME/tmux/socket list-sessions)"}/:[ $'\t']##/:} )
    _describe -t sessions 'sessions' sessions "$@"
  }
  compdef __tmux-sessions t
fi

# Create window if now already existing
create_window_if() {
    win_found=$(tmux list-windows | grep $1 | cut -d" " -f2 | sed 's/\*//g')
    if [[ "$win_found" == "" ]] && [[ -d $2 ]]; then
        cd $2
        tmux new-window -n $1
        cd -
    fi
}

# Create windows
create_windows() {
    create_window_if BCG ~/AVSCFG
    create_window_if ngi_1 ~/ngi_1
    create_window_if ape ~/ape
    create_window_if regression ~/regression
    create_window_if log ~/apefiles/log
    for dir in $(find $HOME -maxdepth 1 -regextype posix-egrep -regex "(.*CR_.*|.*TR_.*|.*PTR_.*|.*WO_.*)" -type d); do
        create_window_if $(basename $dir) $(basename $dir)
    done
}

# Automatically create basic windows when starting tmux
#[ ! -z "$TMUX_SESSION" ] && create_windows

# Automatically create a new tmux session when opening a terminal.  The new
# tmux session is named by increasing number.  If an existing unattached
# session is found, attach the terminal to it instead of creating a new one.

export TMUX_SOCKET="~/tmux/socket"
tmux_session_nb=0
while [ $tmux_session_nb -le  10 ]; do

  # Search for open session attached
  if [[ $(tmux list-sessions | grep "attached" | cut -d ":" -f 1 | grep $tmux_session_nb) == "" ]]; then

    # The session $tmux_session_nb can be used (not existing or existing but not attached)
    export TMUX_SESSION=$tmux_session_nb
    break
  #else
    # The session $tmux_session_nb is already existing and attached
  fi

  export tmux_session_nb=$((tmux_session_nb + 1))

done

alias tmux_new_inc_session='nocorrect t $TMUX_SESSION'



###############
## Terminals ##
###############

if [ $SHLVL  -le 1 ] && [[ "$USER" == "${EXPECTED_USER}" ]]; then
    if [[ "$SUSE_VERSION" == "11" ]]; then
        update_display
        xrdb ~/.Xresources
        xterm -u8 &
        if [ $? -eq 0 ]; then
            disown
            logout
        else
            echo "ERROR: Xterm failed to start!"
            echo "Trying to correct \$DISPLAY var.."
            update_display
            xrdb ~/.Xresources
            xterm -u8 &
            if [ $? -eq 0 ]; then
                disown
                logout
            else
                echo "ERROR: Xterm failed to start! Check that you have an Xserver running"
                alias v='v -X'
                \exit
            fi
        fi
    fi
fi


#echo "\$TERM=$TERM"
case $TERM in
    *xterm*)
        # Use xterm (linux):
        export USING_XTERM_LINUX=1
        echo "Applying xterm config.."
        #if [ $SHLVL  -le 1 ] && [[ "$USER" == "${EXPECTED_USER}"  ]]; then
        #  if [[ "$SUSE_VERSION" == "11" ]]; then
        #    xrdb ~/.Xresources
        #    xterm -u8 &
        #    disown
        #    logout
        #  fi
        #else
        killall -10 tmux -u darmand
        echo "Creating/attaching tmux session ..."
        tmux_new_inc_session
        echo "Done!"
        #tmux_new_inc_session && \exit
        #fi
        ;;
    *rxvt*)
        export USING_URXVT_LINUX=1
        echo "Applying rxvt config.."
        # Use urxvt (linux):
        echo "\$TERM=$TERM"
        #if [ $SHLVL  -le 1 ]; then
        #    xrdb ~/.Xresources
        #    urxvt&
        #    disown
        #    logout
        #else
        #tmux_new_inc_session && \exit
        #fi
        ;;
esac

## Use tera term (Windows):
#if [[ "$USER" == "darmand" ]]; then
#    export USING_TERA_TERM=1
#    echo "Applying Tera Term config.."
#    [[ $TERM != "screen-256color" ]] && tmux_new_inc_session && \exit
#fi

## Use putty_gdi (windows):
#export USING_PUTTY_GDI=1
#[[ $TERM != "screen-256color" ]] && tmux_new_inc_session && \exit

# Use putty (windows):
#[[ $TERM == "screen-256color" ]] && export USING_FUTTY=1
#[[ $TERM != "screen-256color" ]] && tmux_new_inc_session && \exit

# Use MobaXterm (windows):
#[[ $TERM == "screen-256color" ]] && export USING_MOBAXTERM=1
#[[ $TERM != "screen-256color" ]] && tmux_new_inc_session && \exit

# Use xterm (cygwin):
#[[ $TERM == "screen-256color" ]] && export USING_XTERM_CYGWIN=1
#[[ $TERM != "screen-256color" ]] && tmux_new_inc_session && \exit

# Use urxvt (cygwin):
#[[ $TERM == "screen-256color" ]] && export USING_URXVT_CYGWIN=1
#[[ $TERM != "screen-256color" ]] && tmux_new_inc_session && \exit

# Use st terminal:
#export USING_ST_TERMINAL_LINUX=1
#if [ $SHLVL  -le 1 ] && [[ "$USER" == "${EXPECTED_USER}"  ]]; then
#  xrdb ~/.Xresources
#  st &
#  disown
#  logout
#else
#  [[ $TERM != "screen-256color" ]] && tmux_new_inc_session && \exit

# Generate a ESC when a Shift key is pressed and released by itself.
#if [ -z $XCAPE ] ; then
#    # Run xcape only once
#    export XCAPE=1
#    xcape -e 'Shift_L=Escape;Shift_R=Escape'
#fi


if [[ -f $HOME/.zshrc.home ]]; then
  source $HOME/.zshrc.home
fi
