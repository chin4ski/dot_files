# Compilation from source:
# ./configure --prefix=$HOME/env
# make
# make install

SUSE_VERSION=$( grep -a VERSION /etc/SuSE-release | cut -d " " -f 3)

# Path to your oh-my-zsh configuration.
ZSH=$HOME/.oh-my-zsh

# Set name of the theme to load.
# Look in ~/.oh-my-zsh/themes/
# Optionally, if you set this to "random", it'll load a random theme each
# time that oh-my-zsh is loaded.
ZSH_THEME="davide"

# Set to this to use case-sensitive completion
# CASE_SENSITIVE="true"

# Comment this out to disable bi-weekly auto-update checks
 DISABLE_AUTO_UPDATE="true"

# Uncomment to change how many often would you like to wait before auto-updates occur? (in days)
# export UPDATE_ZSH_DAYS=13

# Uncomment following line if you want to disable colors in ls
# DISABLE_LS_COLORS="true"

# Uncomment following line if you want to disable autosetting terminal title.
 DISABLE_AUTO_TITLE="true"

# Uncomment following line if you want red dots to be displayed while waiting for completion
 COMPLETION_WAITING_DOTS="true"

# Which plugins would you like to load? (plugins can be found in ~/.oh-my-zsh/plugins/*)
# Custom plugins may be added to ~/.oh-my-zsh/custom/plugins/
# Example format: plugins=(rails git textmate ruby lighthouse)
plugins=()

export PATH=$PATH:/data3/ngi/soft/git-1.7.1.1/bin
source $ZSH/oh-my-zsh.sh

source $ZSH/plugins/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh

# Customize to your needs...

autoload -Uz compinit && compinit
autoload colors
colors

#export PS1="$(print '%{\e[0;36m%}%n%{\e[0;37m%}@%{\e[0;36m%}%m%{\e[0m%}'):$(print '%{\e[0;33m%}%~%{\e[0m%}')$ "

case $TERM in
    termite|*xterm*|rxvt|rxvt-unicode|rxvt-256color|rxvt-unicode-256color|(dt|k|E)term)
    precmd () { print -Pn "\e]0;[%n@%M][%~]%#\a" } 
    preexec () { print -Pn "\e]0;[%n@%M][%~]%# ($1)\a" }
  ;;
    screen|screen-256color)
      precmd () { 
      print -Pn "\e]83;title \"$1\"\a" 
      print -Pn "\e]0;$TERM - (%L) [%n@%M]%# [%~]\a" 
    }
    preexec () { 
      print -Pn "\e]83;title \"$1\"\a" 
      print -Pn "\e]0;$TERM - (%L) [%n@%M]%# [%~] ($1)\a" 
    }
  ;; 
esac


export PATH=$PATH:$HOME/doc/scripts
export PATH=$PATH:$HOME/curl/usr/local/bin
export PATH=$PATH:$HOME/tools/TTServer
export PATH=$PATH:/projects/ngi/bin
export PATH=$PATH:$BIN

if [[ "$SUSE_VERSION" == "10" ]]; then
  ENV_DIR=$HOME/env_SUSE10
  # For libevent-1.4.so.2 :
  export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/data3/ngi/soft/tools/onCall/memcached/lib
elif [[ "$SUSE_VERSION" == "11" ]]; then
  ENV_DIR=$HOME/env_SUSE11
else
  ENV_DIR=/usr
  echo "Unknown SUSE version!"
fi

export PATH=$ENV_DIR/bin:$PATH
export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$ENV_DIR/lib
export SHELL=$ENV_DIR/bin/zsh

#export PATH=$HOME/.cw/def:$PATH

export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/usr/lib64/engines/

export ECLIPSE_HOME="/gcmtmp/darmand"

export HISTFILE=~/.zsh_history
export HISTSIZE=100000
export SAVEHIST=100000

# Set locale
export LANG=en_US.utf8
export LC_ALL=en_US.utf8
export LANG=en_US.utf8
export LANGUAGE=en_US.utf8

# consider words bash-style
autoload -U select-word-style
select-word-style bash

setopt dotglob

# allow approximate
zstyle ':completion:*' completer _complete _match _approximate
zstyle ':completion:*:match:*' original only

# tab completion for PID :D
zstyle ':completion:*:*:kill:*' menu yes select
zstyle ':completion:*:kill:*' force-list always

bindkey   '^[[5~'   up-line-or-history
bindkey   '^[[6~'   down-line-or-history
bindkey   '^[[A'    up-line-or-search
bindkey   '^[[B'    down-line-or-search
bindkey   -M   vicmd   '	'       yank-pop
bindkey   -M   vicmd   '[3~'   vi-delete-char
bindkey   -M   vicmd   '^r'      redo
bindkey   -M   vicmd   'p'       yank
bindkey   -M   vicmd   'u'       undo
bindkey   -M   vicmd   ''      vi-backward-delete-char
bindkey   -M   vicmd   ''      vi-backward-delete-char      # for urxvt
bindkey   -M   viins   '[3~'   vi-delete-char
bindkey   -M   viins   '^r'      history-incremental-search-backward
bindkey   -M   viins   ''      vi-backward-delete-char
bindkey   -M   viins   ''      vi-backward-delete-char


setopt SHARE_HISTORY
setopt APPEND_HISTORY
setopt EXTENDED_HISTORY

# Report CPU usage for commands running longer than 10 seconds
REPORTTIME=10

OS_NAME=`uname`

export PAGER=less

if [[ "$USER" == "darmand" ]]; then
  export DISPLAY=nce${USER}:0.0
  #export DISPLAY=172.16.13.227:0.0
else
  export DISPLAY=:0.0
fi


export PAGER=less

alias df='nocorrect df'
alias mv='nocorrect mv'
alias tmux='nocorrect tmux -2 -u'
alias cp='nocorrect cp'
alias mkdir='nocorrect mkdir'
alias cvs='nocorrect cvs -w -q'
alias la='ls -a'
alias ll='ls -lh --color=always'
alias grep='grep --exclude "*.os"'
alias adminc='nocorrect adminc'
alias view_as_state='~/doc/scripts/view_as_state.sh'

if [[ "$USER" == "darmand" ]]
then
  #alias vim='nocorrect $HOME/env/bin/vim -u ~/.vim/.vimrc'
  alias vim='nocorrect vim -u ~/.vim/.vimrc'
  alias v='vim'
  alias vimdiff='nocorrect vim -c "windo set wrap" -d'
  alias gvim='nocorrect gvim'
else
  alias vim='nocorrect vim'
  alias v='nocorrect vim'
  alias vimdiff='nocorrect vim -c "windo set wrap" -d'
  alias gvim='nocorrect gvim'
fi

alias view='vim -R'
alias vr='vim -R'
alias svim='nocorrect svim'
alias sv='sudo vim -u ~/.vim/.vimrc'
alias vg='gvim'
alias vc='vim -c ":SessionOpen _LAST_SESSION_"'
alias g='~/doc/scripts/g'
alias gl='~/doc/scripts/gl'
alias gv='~/doc/scripts/gv'
alias dv='~/doc/scripts/cvs_diff_to_vim.sh'
alias vd='~/doc/scripts/vimdiff_input_file.zsh'
alias vdc='~/doc/scripts/vimdiff_modified_files.sh'
alias vod='~/doc/scripts/open_modified_files.zsh'
alias voc='~/doc/scripts/open_conflicting_files.sh'
alias vd2='~/doc/scripts/vimdiff_between_to_dir.sh'

#export EDITOR="$HOME/env/bin/vim -u ~/.vim/.vimrc"
export EDITOR="vim -u ~/.vim/.vimrc"
# export VIMRUNTIME=/remote/users2/darmand/.vim
#export VIMRUNTIME=/remote/users2/darmand/doc/vim/vim73/runtime
export CSCOPE_DB=""
# export CSCOPE_DB=/remote/users2/darmand/doc/cscope.out


alias cdr='cd ~/regression'
alias cdreg='cd ~/regression'

alias cdt='cd /gctmp/darmand/'

alias cdaah='cd ~/ngi_1/src/aah'
alias cdaam='cd ~/ngi_1/src/aam'
alias cdacb='cd ~/ngi_1/src/acb'
alias cdace='cd ~/ngi_1/src/ace'
alias cdacm='cd ~/ngi_1/src/acm'
alias cdacp='cd ~/ngi_1/src/acp'
alias cdags='cd ~/ngi_1/src/ags'
alias cdagw='cd ~/ngi_1/src/agw'
alias cdbcg='cd ~/ngi_1/src/bcg'
alias cdbrc='cd ~/ngi_1/src/brc'
alias cdodc='cd ~/ngi_1/src/odc'
alias cdegh='cd ~/ngi_1/src/egh'
alias cdfsp='cd ~/ngi_1/src/fsp'
alias cdfvp='cd ~/ngi_1/src/fvp'
alias cdcom='cd ~/ngi_1/src/com'
alias cdneg='cd ~/ngi_1/src/neg'
alias cdgdm='cd ~/ngi_1/gdmpacks'
alias cddb='cd ~/ngi_1/dbschema'
alias cde='cd ~/ngi_1/etc'
alias cds='cd ~/ngi_1/src'
alias cdn='cd ~/ngi_1'

#alias vim='/remote/users2/darmand/doc/vim/vim72/src/vim -g -font 6x13'
alias ctags='/remote/users2/darmand/ctags_5.7/ctags-5.7/ctags'

set background=light

unset ENABLE_JOBMANAGER;
unset BM_ACCOUNT;

ulimit -c unlimited 

# Disable <C-S> key, which freezes the terminal (you can use <C-Q> to unfreez>)
stty -ixon

export CVSREAD=0

# export PAGER="vim -"
# export MANPAGER="vim -c '%!col -b' -c 'set ft=man nomod nolist' -c 'set nomodifiable' -"


alias apeConnect='~darmand/tools/shell/apeConnect'
alias golog='cd $HOME/ama/obe/REG/ape/com/log'
alias cdlog='cd $HOME/ama/obe/REG/ape/com/log'
alias cdcore='cd $HOME/ama/obe/SLS'
alias gocore='cd $HOME/ama/obe/SLS'
alias goabr='cd $HOME/ama/obe/REG/ape/com/data/abr'
alias start_otf='nocorrect start_otf'
alias scons="scons appname=APE custom_builddir=/gctmp/$USERNAME/obj obedelpath=/gctmp/$USERNAME/obetar"


###########################################
# tmux stuff

# 2011-10-19: tmux shortcut for creating/attaching named sessions
t() {
  [[ -z "$1" ]] && { echo "usage: t <session>" >&2; return 1; }
  printf '\033]0;%s\007' $1 
  tmux has -t $1 && tmux -2 attach -t $1 || tmux -2 new -s $1
}

if [[ "$USER" != "apeoncal" ]]; then
  # 2011-10-19
  # stolen from completion function _tmux
  function __tmux-sessions() {
  local expl
  local -a sessions
    sessions=( ${${(f)"$(command tmux list-sessions)"}/:[ $'\t']##/:} )
    _describe -t sessions 'sessions' sessions "$@"
  }
  compdef __tmux-sessions t
fi

# Automatically create a new tmux session when opening a terminal.  The new
# tmux session is named by increasing number.  If an existing unattached
# session is found, attach the terminal to it instead of creating a new one.

SESSION_NB=0
while [ $SESSION_NB -le  10 ]; do

  # Search for open session attached
  if [[ $(tmux list-sessions | grep "attached" | cut -d ":" -f 1 | grep $SESSION_NB) == "" ]]; then

    # The session $SESSION_NB can be used (not existing or existing but not attached)
    TARGET_TMUX_SESSION_NB=$SESSION_NB
    break
  #else
    # The session $SESSION_NB is already existing and attached
  fi

  SESSION_NB=$((SESSION_NB + 1))

done

alias tmux_new_inc_session='nocorrect t $TARGET_TMUX_SESSION_NB'


###############
## Terminals ##
###############

# Use putty (windows):
#[[ $TERM == "screen-256color" ]] && export USING_PUTTY=1
#[[ $TERM != "screen-256color" ]] && tmux_new_inc_session && \exit

# Use MobaXterm (windows):
#[[ $TERM == "screen-256color" ]] && export USING_MOBAXTERM=1
#[[ $TERM != "screen-256color" ]] && tmux_new_inc_session && \exit

# Use xterm (linux):
export USING_XTERM_LINUX=1
if [ $SHLVL  -le 1 ] && [[ "$USER" == "darmand"  ]]; then
  if [[ "$SUSE_VERSION" == "11" ]]; then
    xrdb ~/.Xresources
    xterm -u8 &
    disown
    logout
  else
    [[ $TERM != "screen-256color" ]] && tmux_new_inc_session && \exit
  fi
else
  [[ $TERM != "screen-256color" ]] && tmux_new_inc_session && \exit
fi

# Use urxvt (linux):
#if [ $SHLVL  -le 1 ]; then
#  xrdb ~/.Xresources
#  urxvt&
#  disown
#  logout
#else
#  export USING_URXVT_LINUX=1
#  [[ $TERM != "screen-256color" ]] && tmux_new_inc_session && \exit
#fi

# Use xterm (cygwin):
#[[ $TERM == "screen-256color" ]] && export USING_XTERM_CYGWIN=1
#[[ $TERM != "screen-256color" ]] && tmux_new_inc_session && \exit

# Use urxvt (cygwin):
#[[ $TERM == "screen-256color" ]] && export USING_URXVT_CYGWIN=1
#[[ $TERM != "screen-256color" ]] && tmux_new_inc_session && \exit

################################################

if [[ -f $HOME/.zshrc.home ]]; then
  source $HOME/.zshrc.home
fi
