let SessionLoad = 1
if &cp | set nocp | endif
let s:cpo_save=&cpo
set cpo&vim
inoremap <silent> <Plug>(neocomplcache_start_omni_complete) 
inoremap <silent> <Plug>(neocomplcache_start_auto_complete) =neocomplcache#popup_post()
inoremap <silent> <expr> <Plug>(neocomplcache_start_unite_quick_match) unite#sources#neocomplcache#start_quick_match()
inoremap <silent> <expr> <Plug>(neocomplcache_start_unite_complete) unite#sources#neocomplcache#start_complete()
nnoremap <silent>  :nohlsearch
map  k_
noremap  :silent set paste"+]p:set nopaste
vnoremap <silent>  :CloseBufferAndSplit
nnoremap <silent>  :CloseBufferAndSplit
onoremap <silent>  :CloseBufferAndSplit
noremap [15~ :e!
vnoremap [12~ :wgv
nnoremap [12~ :w
onoremap [12~ :w
noremap <silent> [21;3~ :silent botright copen:silent cg $TMPDIR/$USER/_VIM/restart_logs/logs:silent setlocal autoreadG
noremap <silent> [21~ :silent botright copen:silent cg $TMPDIR/$USER/_VIM/scons_errors/scons.err:silent setlocal autoreadG
noremap [20;3~ :call RestartBE():botright copen
noremap [20~ :call Scons():botright copen
noremap [18~ :!~/doc/scripts/kill_scons.sh
nnoremap + 	
nnoremap - 
vnoremap [17~ :silent set paste!gv
nnoremap [17~ :silent set invpaste paste?
map x :silent cnextzz
map z :silent cprevzz
noremap <silent> , :silent call MergeRightToLeft()
noremap <silent> . :silent call MergeLeftToRight()
vmap <silent> c :cneweri
nmap <silent> c :cnewer
omap <silent> c :cnewer
vmap <silent> \ :colderi
nmap <silent> \ :colder
omap <silent> \ :colder
vnoremap <silent> e :Tbbngv
nnoremap <silent> e :Tbbn
onoremap <silent> e :Tbbn
vnoremap <silent> w :Tbbpgv
nnoremap <silent> w :Tbbp
onoremap <silent> w :Tbbp
vnoremap <silent> q :CloseBuffergv
nnoremap <silent> q :CloseBuffer
onoremap <silent> q :CloseBuffer
vmap a :Agv
nmap a :A
omap a :A
nmap = =
nmap <silent> [1;3D :silent call MoveSplitSeparatorToLeft()
nmap <silent> [1;3C :silent call MoveSplitSeparatorToRight()
nmap <silent> [1;3A :silent call MoveSplitSeparatorToUp()
nmap <silent> [1;3B :silent call MoveSplitSeparatorToDown()
vmap <silent> [23~ :ToggleQuickfixSignsgv
nnoremap <silent> [23~ :ToggleQuickfixSigns
onoremap <silent> [23~ :ToggleQuickfixSigns
noremap <silent> [24~ :SessionList
nnoremap <silent> [19~ :UndotreeToggle
nnoremap <silent> [13~ :YRShow
vnoremap <expr> [B 'djhp`[' . strpart(getregtype(), 0, 1) . '`]'
vnoremap <expr> [A 'dkhp`[' . strpart(getregtype(), 0, 1) . '`]'
vnoremap <expr> [D 'dhhp`[' . strpart(getregtype(), 0, 1) . '`]'
vnoremap <expr> [C 'dp`[' . strpart(getregtype(), 0, 1) . '`]'
nnoremap <silent> [14~ :setlocal invspell spell? spelllang=en_us
map  :Gtags -r
nnoremap  gzvzz
onoremap   za
nnoremap <silent>   :CtrlPMixed
vnoremap <silent> # :let old_reg=getreg('"')|let old_regtype=getregtype('"')gvy?=substitute(escape(@", '?\.*$^~['), '\_s\+', '\\_s\\+', 'g')gV:call setreg('"', old_reg, old_regtype)
noremap '' ``zz
noremap '. `.zz
nnoremap ' `
vnoremap <silent> * :let old_reg=getreg('"')|let old_regtype=getregtype('"')gvy/=substitute(escape(@", '/\.*$^~['), '\_s\+', '\\_s\\+', 'g')gV:call setreg('"', old_reg, old_regtype)
xmap <silent> + <Plug>MarkSet
nmap <silent> + <Plug>MarkSet
xmap <silent> - <Plug>ClearLastMark
nmap <silent> - <Plug>ClearLastMark
vnoremap . :normal .
vnoremap < <gv
vnoremap = =gv
vnoremap > >gv
map K <silent>
vnoremap P "_dP
nnoremap Q gqap
vnoremap Q gq
xmap S <Plug>VSurround
nmap <silent> Xp dawwP
nmap X <Plug>(exjumplist-next-buffer)
nmap Z <Plug>(exjumplist-previous-buffer)
vmap [% [%m'gv``
nmap [ [m:noh
vnoremap \mm :norm@q
nnoremap \mm :call Marvim_search()
vnoremap \ms y:call Marvim_template_store()
nnoremap \ms :call Marvim_macro_store()
nmap <silent> \ig <Plug>IndentGuidesToggle
nmap \ihn :IHN
nmap \is :IHS:A
nmap \ih :IHS
nmap \ca <Plug>NERDCommenterAltDelims
xmap \cu <Plug>NERDCommenterUncomment
nmap \cu <Plug>NERDCommenterUncomment
xmap \cb <Plug>NERDCommenterAlignBoth
nmap \cb <Plug>NERDCommenterAlignBoth
xmap \cl <Plug>NERDCommenterAlignLeft
nmap \cl <Plug>NERDCommenterAlignLeft
nmap \cA <Plug>NERDCommenterAppend
xmap \cy <Plug>NERDCommenterYank
nmap \cy <Plug>NERDCommenterYank
xmap \cs <Plug>NERDCommenterSexy
nmap \cs <Plug>NERDCommenterSexy
nmap \c$ <Plug>NERDCommenterToEOL
xmap \cn <Plug>NERDCommenterNested
nmap \cn <Plug>NERDCommenterNested
xmap \cm <Plug>NERDCommenterMinimal
nmap \cm <Plug>NERDCommenterMinimal
xmap \c  <Plug>NERDCommenterToggle
nmap \c  <Plug>NERDCommenterToggle
xmap \cc <Plug>NERDCommenterComment
nmap \cc <Plug>NERDCommenterComment
vnoremap \gbb ymo[{ma%mb`o:'a,'b g/=escape(@",'\\/.*$^~[]')/normal 
vnoremap \ggb y:bufdo g/=escape(@",'\\/.*$^~[]')/normal  |up<Left><Left><Left><Left><Left>
vnoremap \gb y:bufdo g/=escape(@",'\\/.*$^~[]')/normal  |up<Left><Left><Left><Left><Left>
vnoremap \gg y:g/=escape(@",'\\/.*$^~[]')/normal 
vnoremap \g :g//normal <Left><Left><Left><Left><Left><Left><Left><Left>
nnoremap \gbb mo[{ma%mb`o:'a,'b g/\<\>/normal 
nnoremap \ggb :bufdo g/\<\>/normal  |up<Left><Left><Left>
nnoremap \gb :bufdo g//normal  |up<Left><Left><Left><Left><Left><Left><Left><Left><Left><Left><Left>
nnoremap \gg :g/\<\>/normal 
nnoremap \g :g//normal <Left><Left><Left><Left><Left><Left><Left><Left>
noremap \_ :s#_\(\l\)#\u\1#g
noremap \__ :s#\(\%(\<\l\+\)\%(_\)\@=\)\|_\(\l\)#\u\1\2#g
vmap <silent> \rG <Plug>EgMapGrepSelection_V
vmap <silent> \rg <Plug>EgMapGrepSelection_v
vnoremap \ra y:argdo %s/=escape(@",'\\/.*$^~[]')//gec |up<Left><Left><Left><Left><Left><Left><Left><Left>
vnoremap \rbb ymo[{ma%mb`o:'a,'b s/=escape(@",'\\/.*$^~[]')//gec<Left><Left><Left><Left>
vnoremap \rrb y:bufdo %s/=escape(@",'\\/.*$^~[]')//gec<Left> |up<Left><Left><Left><Left><Left><Left><Left>
vnoremap \rb y:bufdo %s/=escape(@",'\\/.*$^~[]')//gec<Left> |up<Left><Left><Left><Left><Left><Left><Left>
vnoremap \rr y:%s/=escape(@",'\\/.*$^~[]')//gec<Left><Left><Left><Left>
nmap <silent> \rG <Plug>EgMapReplaceCurrentWord_R
omap <silent> \rG <Plug>EgMapReplaceCurrentWord_R
nmap <silent> \rg <Plug>EgMapReplaceCurrentWord_r
omap <silent> \rg <Plug>EgMapReplaceCurrentWord_r
nnoremap \rra :argdo %s/\<\>//gec |up<Left><Left><Left><Left><Left><Left><Left><Left>
nnoremap \rbb mo[{ma%mb`o:'a,'b s/\<\>//gec<Left><Left><Left><Left>
nnoremap \rrb :bufdo %s/\<\>//gec |up<Left><Left><Left><Left><Left><Left><Left><Left>
nnoremap \rr :%s/\<\>//gec<Left><Left><Left><Left>
nnoremap \ra :argdo %s///gec |up<Left><Left><Left><Left><Left><Left><Left><Left><Left>
nnoremap \rb :bufdo %s///gec |up<Left><Left><Left><Left><Left><Left><Left><Left><Left>
vnoremap \r :s///gec<Left><Left><Left><Left><Left>
nnoremap \r :%s///gec<Left><Left><Left><Left><Left>
vnoremap \sa y:args `grep -Ril \"=escape(@",'\\/.*$^~[]')\" *`<Left>
vnoremap \sb y:Bgrep -i =escape(@",'\\/.*$^~[]')
vnoremap \ss y:Rgrep -i =escape(@",'\\/.*$^~[]') *pp<Left><Left><Left><Left>
vnoremap \s y:Rgrep -i =escape(@",'\\/.*$^~[]') *pp<Left><Left><Left><Left>
nnoremap \ssa :args `grep -Ril \"\<\>\" *`<Left>
nnoremap \ssb :Bgrep -i \<\>
nnoremap \ss :Rgrep -i \<\> *pp
nnoremap \sa :args `find . -name \"*\" -exec grep -il \"\" '{}' \;`<Left><Left><Left><Left><Left><Left><Left><Left><Left><Left><Left><Left><Left><Left><Left><Left><Left><Left><Left><Left><Left><Left><Left><Left><Left><Left><Left><Left><Left><Left><Left>
nnoremap \sb :Bgrep -i 
nnoremap \s :Rgrep -i  *pp<Left><Left><Left><Left>
vnoremap \ha :call Hex2Dec()
vnoremap \ah :call Dec2Hex()
nmap \rv "zyiw:call Refactor()mx:silent! norm gd[V%:s///z/gc`x
nmap <silent> \u- :t.|s/./-/g|:nohls
nmap <silent> \u= :t.|s/./=/g|:nohls
noremap \Y "+Y
noremap \y "+y
noremap \P :silent set paste"+]P:set nopaste
noremap \p :silent set paste"+]p:set nopaste
nmap \b va{
map \x <Plug>NERDCommenterInvert
nmap \h :split:Tbblzzzz
nmap \v :vsplit:Tbblzzzz
nmap <silent> \w :set invwrap:set wrap?
nmap <silent> \er :e NONREG_RESULTS-STDOUT.txt
nmap <silent> \el :e %.log
nmap <silent> \ez :execute "e ~/.zshrc.".$USER
nmap <silent> \sv :execute "source ".g:dot_vim_dir."/.vimrc"
nmap <silent> \ev :execute "e ".g:dot_vim_dir."/.vimrc"
nnoremap <silent> \sc :Sscratch
xmap <silent> \R <Plug>MarkRegex
nmap <silent> \R <Plug>MarkRegex
nmap \C <Plug>VCSCommit
vmap ]% ]%m'gv``
nmap ] ]m
nnoremap ` '
onoremap <silent> aC :call TextObjWordBasedColumn("aW")
onoremap <silent> ac :call TextObjWordBasedColumn("aw")
vmap a% [%v]%
nmap cs <Plug>Csurround
nmap ds <Plug>Dsurround
nmap gx <Plug>NetrwBrowseX
xmap gS <Plug>VgSurround
nnoremap g gzvzz
nnoremap <expr> gV "`[".getregtype(v:register)[0]."`]"
onoremap <silent> iC :call TextObjWordBasedColumn("iW")
onoremap <silent> ic :call TextObjWordBasedColumn("iw")
noremap qd 0"qdd`q
noremap qp mqo"qp
nnoremap <silent> viC :call TextObjWordBasedColumn("iW")
nnoremap <silent> vic :call TextObjWordBasedColumn("iw")
nnoremap <silent> vaC :call TextObjWordBasedColumn("aW")
nnoremap <silent> vac :call TextObjWordBasedColumn("aw")
nmap ySS <Plug>YSsurround
nmap ySs <Plug>YSsurround
nmap yss <Plug>Yssurround
nmap yS <Plug>YSurround
nmap ys <Plug>Ysurround
nnoremap <silent> <Plug>NetrwBrowseX :call netrw#NetrwBrowseX(expand("<cWORD>"),0)
nnoremap <silent> <Plug>SurroundRepeat .
xnoremap <silent> <Plug>NERDCommenterUncomment :call NERDComment("x", "Uncomment")
nnoremap <silent> <Plug>NERDCommenterUncomment :call NERDComment("n", "Uncomment")
xnoremap <silent> <Plug>NERDCommenterAlignBoth :call NERDComment("x", "AlignBoth")
nnoremap <silent> <Plug>NERDCommenterAlignBoth :call NERDComment("n", "AlignBoth")
xnoremap <silent> <Plug>NERDCommenterAlignLeft :call NERDComment("x", "AlignLeft")
nnoremap <silent> <Plug>NERDCommenterAlignLeft :call NERDComment("n", "AlignLeft")
nnoremap <silent> <Plug>NERDCommenterAppend :call NERDComment("n", "Append")
xnoremap <silent> <Plug>NERDCommenterYank :call NERDComment("x", "Yank")
nnoremap <silent> <Plug>NERDCommenterYank :call NERDComment("n", "Yank")
xnoremap <silent> <Plug>NERDCommenterSexy :call NERDComment("x", "Sexy")
nnoremap <silent> <Plug>NERDCommenterSexy :call NERDComment("n", "Sexy")
xnoremap <silent> <Plug>NERDCommenterInvert :call NERDComment("x", "Invert")
nnoremap <silent> <Plug>NERDCommenterInvert :call NERDComment("n", "Invert")
nnoremap <silent> <Plug>NERDCommenterToEOL :call NERDComment("n", "ToEOL")
xnoremap <silent> <Plug>NERDCommenterNested :call NERDComment("x", "Nested")
nnoremap <silent> <Plug>NERDCommenterNested :call NERDComment("n", "Nested")
xnoremap <silent> <Plug>NERDCommenterMinimal :call NERDComment("x", "Minimal")
nnoremap <silent> <Plug>NERDCommenterMinimal :call NERDComment("n", "Minimal")
xnoremap <silent> <Plug>NERDCommenterToggle :call NERDComment("x", "Toggle")
nnoremap <silent> <Plug>NERDCommenterToggle :call NERDComment("n", "Toggle")
xnoremap <silent> <Plug>NERDCommenterComment :call NERDComment("x", "Comment")
nnoremap <silent> <Plug>NERDCommenterComment :call NERDComment("n", "Comment")
nnoremap <silent> <BS> :nohlsearch
cnoremap  <Home>
cnoremap  <End>
imap S <Plug>ISurround
imap s <Plug>Isurround
imap <expr> 	 neocomplcache#sources#snippets_complete#expandable() ? "\<Plug>(neocomplcache_snippets_expand)" : pumvisible() ? "\" : "\	"
cnoremap  
inoremap <silent>  =EnterIndent()
inoremap <silent>  :CloseBufferAndSpliti
imap  <Plug>Isurround
imap  
inoremap [12~ :w
inoremap [17~ :silent set invpaste paste?i
imap <silent> c :cneweri
imap <silent> \ :colderi
inoremap <silent> e :Tbbni
inoremap <silent> w :Tbbpi
inoremap <silent> q :CloseBufferi
imap a :Ai
imap <silent> [23~ [23~
imap \ihn :IHN
imap \is :IHS:A
imap \ih :IHS
iabbr teh the
iabbr Teh The
iabbr taht that
iabbr Taht That
iabbr shoudl should
iabbr Shoudl Should
iabbr seureth suereth
iabbr Seureth Suereth
iabbr seperate separate
iabbr Seperate Separate
iabbr lifecycles life-cycles
iabbr Lifecycles Life-cycles
iabbr lifecycle life-cycle
iabbr Lifecycle Life-cycle
iabbr fone phone
iabbr Fone Phone
iabbr exmaples examples
iabbr Exmaples Examples
iabbr exmaple example
iabbr Exmaple Example
iabbr charcters characters
iabbr Charcters Characters
iabbr charcter character
iabbr Charcter Character
iabbr bianry binary
iabbr Bianry Binary
iabbr bianries binaries
iabbr Bianries Binaries
iabbr becuase because
iabbr Becuase Because
iabbr aslo also
iabbr Aslo Also
iabbr alos also
iabbr Alos Also
iabbr acheive achieve
iabbr Acheive Achieve
let &cpo=s:cpo_save
unlet s:cpo_save
set backspace=indent,eol,start
set backup
set backupdir=/tmp/chinaski/_VIM/backup//
set cindent
set cinoptions=s,e0,n0,f0,{0,}0,^0,:s,=s,l0,b0,gs,hs,ps,ts,is,+s,c3,C0,/0,(0,us,U0,w0,W0,m0,j0,)20,*30,#0
set comments=s1:/*,mb:*,ex:*/,f://,b:#,:%,:XCOMM,n:>,fb:-
set complete=.,t
set completefunc=neocomplcache#manual_complete
set completeopt=menu
set cscopetagorder=1
set directory=~/.vimswap//
set encoding=utf-8
set noequalalways
set expandtab
set fileencodings=ucs-bom,utf-8,default,latin1
set formatoptions=rq
set hidden
set history=10000
set hlsearch
set ignorecase
set incsearch
set laststatus=2
set lazyredraw
set listchars=tab:>-,trail:_
set makeef=vim.err
set matchpairs=(:),{:},[:],<:>
set mouse=a
set report=0
set rulerformat=%15(%c%V\ %p%%%)
set runtimepath=~/.vim/localbundle,~/.vim,/usr/share/vim/vimfiles,/usr/share/vim/vim73,/usr/share/vim/vimfiles/after,~/.vim/after,~/.vim/localbundle/after
set shiftwidth=2
set showcmd
set showmatch
set smartcase
set smartindent
set smarttab
set softtabstop=2
set nostartofline
set synmaxcol=2048
set tabstop=2
set tags=~/ngi_1/tags
set ttimeoutlen=10
set undodir=~/.vimundo//
set undofile
set updatetime=500
set viewdir=~/.vimview//
set viminfo=\"1000,:5000,'1000,n/home/chinaski/.viminfo
set virtualedit=all
set visualbell
set wildignore=.svn,CVS,.git,*.o,*.os,*.a,*.class,*.mo,*.la,*.so,*.obj,*.swp,*.jpg,*.png,*.xpm,*.gif,.#*,L64*,deliveries
set wildmenu
set wildmode=list:longest
let s:so_save = &so | let s:siso_save = &siso | set so=0 siso=0
let v:this_session=expand("<sfile>:p")
silent only
cd ~/
if expand('%') == '' && !&modified && line('$') <= 1 && getline(1) == ''
  let s:wipebuf = bufnr('%')
endif
set shortmess=aoO
silent! argdel *
set splitbelow splitright
wincmd _ | wincmd |
split
1wincmd k
wincmd w
set nosplitbelow
set nosplitright
wincmd t
set winheight=1 winwidth=1
exe '1resize ' . ((&lines * 1 + 12) / 24)
exe '2resize ' . ((&lines * 20 + 12) / 24)
argglobal
enew
file -TabBar-
let s:cpo_save=&cpo
set cpo&vim
nnoremap <buffer> 	 :call search('\[[0-9]*:[^\]]*\]'):<BS>
nnoremap <buffer> p :wincmd p:<BS>
nnoremap <buffer> <S-Tab> :call search('\[[0-9]*:[^\]]*\]','b'):<BS>
let &cpo=s:cpo_save
unlet s:cpo_save
setlocal keymap=
setlocal noarabic
setlocal noautoindent
setlocal nobinary
setlocal bufhidden=delete
setlocal nobuflisted
setlocal buftype=nofile
setlocal cindent
setlocal cinkeys=0{,0},0),:,0#,!^F,o,O,e
setlocal cinoptions=s,e0,n0,f0,{0,}0,^0,:s,=s,l0,b0,gs,hs,ps,ts,is,+s,c3,C0,/0,(0,us,U0,w0,W0,m0,j0,)20,*30,#0
setlocal cinwords=if,else,while,do,for,switch
setlocal colorcolumn=
setlocal comments=s1:/*,mb:*,ex:*/,f://,b:#,:%,:XCOMM,n:>,fb:-
setlocal commentstring=/*%s*/
setlocal complete=.,t
set concealcursor=i
setlocal concealcursor=i
set conceallevel=2
setlocal conceallevel=2
setlocal completefunc=neocomplcache#manual_complete
setlocal nocopyindent
setlocal cryptmethod=
setlocal nocursorbind
setlocal nocursorcolumn
set cursorline
setlocal cursorline
setlocal define=
setlocal dictionary=
setlocal nodiff
setlocal equalprg=
setlocal errorformat=
setlocal expandtab
if &filetype != ''
setlocal filetype=
endif
setlocal foldcolumn=0
setlocal foldenable
setlocal foldexpr=0
setlocal foldignore=#
setlocal foldlevel=0
setlocal foldmarker={{{,}}}
setlocal foldmethod=manual
setlocal foldminlines=1
setlocal foldnestmax=20
setlocal foldtext=foldtext()
setlocal formatexpr=
setlocal formatoptions=rq
setlocal formatlistpat=^\\s*\\d\\+[\\]:.)}\\t\ ]\\s*
setlocal grepprg=
setlocal iminsert=0
setlocal imsearch=0
setlocal include=
setlocal includeexpr=
setlocal indentexpr=
setlocal indentkeys=0{,0},:,0#,!^F,o,O,e
setlocal noinfercase
setlocal iskeyword=@,48-57,_,192-255
setlocal keywordprg=
setlocal nolinebreak
setlocal nolisp
set list
setlocal list
setlocal makeprg=
setlocal matchpairs=(:),{:},[:],<:>
setlocal modeline
setlocal nomodifiable
setlocal nrformats=octal,hex
set number
setlocal nonumber
setlocal numberwidth=4
setlocal omnifunc=
setlocal path=
setlocal nopreserveindent
setlocal nopreviewwindow
setlocal quoteescape=\\
setlocal noreadonly
setlocal norelativenumber
setlocal norightleft
setlocal rightleftcmd=search
setlocal noscrollbind
setlocal shiftwidth=2
setlocal noshortname
setlocal smartindent
setlocal softtabstop=2
setlocal nospell
setlocal spellcapcheck=[.?!]\\_[\\])'\"\	\ ]\\+
setlocal spellfile=
setlocal spelllang=en
setlocal statusline=
setlocal suffixesadd=
setlocal noswapfile
setlocal synmaxcol=2048
if &syntax != ''
setlocal syntax=
endif
setlocal tabstop=2
setlocal tags=
setlocal textwidth=80
setlocal thesaurus=
setlocal undofile
setlocal nowinfixheight
setlocal nowinfixwidth
setlocal wrap
setlocal wrapmargin=0
wincmd w
argglobal
enew
setlocal keymap=
setlocal noarabic
setlocal noautoindent
setlocal nobinary
setlocal bufhidden=
setlocal buflisted
setlocal buftype=
setlocal cindent
setlocal cinkeys=0{,0},0),:,0#,!^F,o,O,e
setlocal cinoptions=s,e0,n0,f0,{0,}0,^0,:s,=s,l0,b0,gs,hs,ps,ts,is,+s,c3,C0,/0,(0,us,U0,w0,W0,m0,j0,)20,*30,#0
setlocal cinwords=if,else,while,do,for,switch
setlocal colorcolumn=
setlocal comments=s1:/*,mb:*,ex:*/,f://,b:#,:%,:XCOMM,n:>,fb:-
setlocal commentstring=/*%s*/
setlocal complete=.,t
set concealcursor=i
setlocal concealcursor=i
set conceallevel=2
setlocal conceallevel=2
setlocal completefunc=neocomplcache#manual_complete
setlocal nocopyindent
setlocal cryptmethod=
setlocal nocursorbind
setlocal nocursorcolumn
set cursorline
setlocal cursorline
setlocal define=
setlocal dictionary=
setlocal nodiff
setlocal equalprg=
setlocal errorformat=
setlocal expandtab
if &filetype != ''
setlocal filetype=
endif
setlocal foldcolumn=0
setlocal foldenable
setlocal foldexpr=0
setlocal foldignore=#
setlocal foldlevel=0
setlocal foldmarker={{{,}}}
setlocal foldmethod=manual
setlocal foldminlines=1
setlocal foldnestmax=20
setlocal foldtext=foldtext()
setlocal formatexpr=
setlocal formatoptions=rq
setlocal formatlistpat=^\\s*\\d\\+[\\]:.)}\\t\ ]\\s*
setlocal grepprg=
setlocal iminsert=0
setlocal imsearch=0
setlocal include=
setlocal includeexpr=
setlocal indentexpr=
setlocal indentkeys=0{,0},:,0#,!^F,o,O,e
setlocal noinfercase
setlocal iskeyword=@,48-57,_,192-255
setlocal keywordprg=
setlocal nolinebreak
setlocal nolisp
set list
setlocal list
setlocal makeprg=
setlocal matchpairs=(:),{:},[:],<:>
setlocal modeline
setlocal modifiable
setlocal nrformats=octal,hex
set number
setlocal number
setlocal numberwidth=4
setlocal omnifunc=
setlocal path=
setlocal nopreserveindent
setlocal nopreviewwindow
setlocal quoteescape=\\
setlocal noreadonly
setlocal norelativenumber
setlocal norightleft
setlocal rightleftcmd=search
setlocal noscrollbind
setlocal shiftwidth=2
setlocal noshortname
setlocal smartindent
setlocal softtabstop=2
setlocal nospell
setlocal spellcapcheck=[.?!]\\_[\\])'\"\	\ ]\\+
setlocal spellfile=
setlocal spelllang=en
setlocal statusline=%!Pl#Statusline(0,1)
setlocal suffixesadd=
setlocal swapfile
setlocal synmaxcol=2048
if &syntax != ''
setlocal syntax=
endif
setlocal tabstop=2
setlocal tags=
setlocal textwidth=0
setlocal thesaurus=
setlocal undofile
setlocal nowinfixheight
setlocal nowinfixwidth
setlocal wrap
setlocal wrapmargin=0
wincmd w
2wincmd w
exe '1resize ' . ((&lines * 1 + 12) / 24)
exe '2resize ' . ((&lines * 20 + 12) / 24)
tabnext 1
if exists('s:wipebuf')
  silent exe 'bwipe ' . s:wipebuf
endif
unlet! s:wipebuf
set winheight=1 winwidth=20 shortmess=filnxtToO
let s:sx = expand("<sfile>:p:r")."x.vim"
if file_readable(s:sx)
  exe "source " . fnameescape(s:sx)
endif
let &so = s:so_save | let &siso = s:siso_save
doautoall SessionLoadPost
unlet SessionLoad
" vim: set ft=vim :
